{"version":3,"sources":["Components/InputItem.js","Components/RadioInputItem.js","Components/ExtraInputItem.js","Components/LazyForm.js","index.js"],"names":["Hint","content","className","InputItem","title","rule","updateInput","useState","value","setValue","hint","setHint","isLegal","result","test","getValue","useEffect","type","onChange","e","target","placeholder","RadioInputItem","content1","content2","name","defaultChecked","ExtraInputItem","subTitle","inputInfoMap","Map","LazyForm","set","onClick","forEach","push","every","key","alert","join","MainContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc2e00ce.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// 必填屬性的輸入項目，title 決定顯示主題，rule 為內容檢測規則 (選填)\r\nfunction InputItem({ title, rule, updateInput }) {\r\n  const [value, setValue] = useState(''); // 對應到 input 元件的輸入值\r\n  const [hint, setHint] = useState('');   // 是否顯示警告\r\n\r\n  // 內容刷新時，同步更新屬於自己的 input info\r\n  useEffect(() => {\r\n    updateInput(title, isLegal, getValue);\r\n  })\r\n\r\n  // input 子元件的必備介面，檢測 input 內容是否符合規則\r\n  function isLegal() {\r\n\r\n    if (value === '') {   // 輸入為空值一律擋下並顯示警告\r\n      setHint('這是必填問題');\r\n      return false;\r\n    }\r\n    else if (rule) {    // 具備檢測規則時，進行檢測\r\n      const result = rule.test(value);\r\n      setHint(result ? '' : '格式錯誤');\r\n      return result;\r\n    }\r\n    setHint('');  // 通過檢測\r\n    return true;\r\n  }\r\n\r\n  // input 子元件的必備介面，獲取輸入值\r\n  function getValue() {\r\n    return value;\r\n  }\r\n\r\n  // onChange 跟 setValue 連結，將輸入變更與 state 同步\r\n  // 當 hint 不為空值時，顯示警告內容\r\n  return (\r\n    <div className=\"content-input-group\">\r\n      <div className=\"input-title\">{title}<span className=\"emphasize\"> *</span></div>\r\n      <input\r\n        className=\"input-text\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        placeholder=\"您的回答\"\r\n      ></input>\r\n      { hint ? <Hint content={hint} /> : ''}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 警告元件，依需求填入適合的警告訊息\r\n// hint icon 群組，是為了用 CSS 畫出辣個警告圖示\r\nfunction Hint({ content }) {\r\n  return <div className=\"input-hint\">\r\n    <span className=\"hint-icon\">\r\n      <div className=\"icon-above\"></div>\r\n      <div className=\"icon-below\"></div>\r\n    </span>\r\n    <span className=\"hint-text\">{content}</span>\r\n  </div>;\r\n}\r\n\r\nexport default InputItem;\r\n","import { useState, useEffect } from 'react';\r\n\r\n // RadioInputItem - radio 輸入，當時有點懶，內容沒有模組化，僅符合需求寫死而已\r\nfunction RadioInputItem({ title, updateInput }) {\r\n  const content1 = '躺在床上用想像力實作';          // 寫死的選項內容 - 1\r\n  const content2 = '趴在地上滑手機找現成的';        // 寫死的選項內容 - 2\r\n  const [value, setValue] = useState(content1);   // 對應到 input 元件的輸入值\r\n\r\n  // 內容刷新時，同步更新屬於自己的 input info\r\n  useEffect(() => {\r\n    updateInput(title, isLegal, getValue);\r\n  });\r\n\r\n  // input 子元件的必備介面，此元件一率回傳 true \r\n  function isLegal() {\r\n    return true;\r\n  }\r\n\r\n  // input 子元件的必備介面，獲取輸入值\r\n  function getValue() {\r\n    return value;\r\n  }\r\n\r\n  // 因為內容寫死的，所以簡單暴力\r\n  // 為了將 label 視為 radio 的有效點擊範圍，多包了幾層\r\n  return (\r\n    <div className=\"content-input-group content-sign-up-type\">\r\n      <div className=\"input-title\">{title}<span className=\"emphasize\"> *</span></div>\r\n      <label className=\"input-radio-cover\">\r\n        <input\r\n          className=\"input-radio\"\r\n          name=\"sign-up-type\"\r\n          type=\"radio\"\r\n          value={content1}\r\n          onChange={e => setValue(e.target.value)}\r\n          defaultChecked\r\n        ></input> {content1}</label>\r\n      <label className=\"input-radio-cover\">\r\n        <input\r\n          className=\"input-radio\"\r\n          name=\"sign-up-type\"\r\n          type=\"radio\"\r\n          value={content2}\r\n          onChange={e => setValue(e.target.value)}\r\n        ></input> {content2}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RadioInputItem;\r\n","import { useState, useEffect } from 'react';\r\n\r\n// 非必填的輸入項目，除了 title 外，可以額外設置 subTitle\r\nfunction ExtraInputItem({ title, subTitle, updateInput }) {\r\n  const [value, setValue] = useState(''); // 對應到 input 元件的輸入值\r\n\r\n  // 內容刷新時，同步更新屬於自己的 input info\r\n  useEffect(() => {\r\n    updateInput(title, isLegal, getValue);\r\n  });\r\n\r\n  // input 子元件的必備介面，此元件一率回傳 true \r\n  function isLegal() {\r\n    return true;\r\n  }\r\n\r\n  // input 子元件的必備介面，獲取輸入值\r\n  function getValue() {\r\n    return value;\r\n  }\r\n\r\n  // onChange 跟 setValue 連結，將輸入變更與 state 同步\r\n  return (\r\n    <div className=\"content-input-group content-extra\">\r\n      <div className=\"input-title\">{title}</div>\r\n      <div className=\"input-extra-info\">{subTitle}</div>\r\n      <input\r\n        className=\"input-text\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        placeholder=\"您的回答\"\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExtraInputItem;\r\n","import InputItem from './InputItem';\r\nimport RadioInputItem from './RadioInputItem';\r\nimport ExtraInputItem from './ExtraInputItem';\r\n\r\n// 記錄各項 input 用的 map\r\nlet inputInfoMap = new Map();\r\n\r\n// 表單內容本體\r\nfunction LazyForm() {\r\n  const mailRule = /^.+@.+\\./;  // mail 的檢測規則\r\n  const numRule = /^09\\d{8}$/;  // 手機號碼的檢測規則 (只限台灣地區)\r\n\r\n  // 判斷 map 中的所有輸入，是否都通過檢測\r\n  function isLegal() {\r\n    const result = [];\r\n    inputInfoMap.forEach(value => {\r\n      result.push(value.isLegal());\r\n    });\r\n    return result.every(e => e);\r\n  }\r\n\r\n  // 送出鍵，當所有輸入都通過檢測時，以 alert 輸出表單內容\r\n  function onSubmit() {\r\n    if (!isLegal()) return;\r\n\r\n    const result = [];\r\n    inputInfoMap.forEach((value, key) => {\r\n      result.push(`${key} : ${value.getValue()}`);\r\n    });\r\n    alert(result.join('\\n'));\r\n  }\r\n\r\n  // 更新輸入資訊，子元件與表單的溝通管道 (子元件負責 input 的相關職責)\r\n  // title 必須為唯一值才會如預期般運作 (理應不會出現 title 重複出現的 use case)\r\n  function updateInput(title, isLegal, getValue) {\r\n    inputInfoMap.set(title, { isLegal, getValue });\r\n  }\r\n\r\n  // InputItem - 必填屬性的輸入項目，title 決定顯示主題，rule 為內容檢測規則 (選填)\r\n  // RadioInputItem - radio 輸入，當時有點懶，內容沒有模組化，僅符合需求寫死而已\r\n  // ExtraInputItem - 非必填的輸入項目，除了 title 外，可以額外設置 subTitle\r\n  // 剩下一些沒元件化價值的內容就直接打在 jsx 裡了\r\n  return (\r\n    <div className=\"form-content-area\">\r\n      <div className=\"content-title\">新拖延運動報名表單</div>\r\n      <div className=\"content-time-and-location\">\r\n        <div>活動日期：2020/12/10 ~ 2020/12/11</div>\r\n        <div>活動地點：台北市大安區新生南路二段1號</div>\r\n      </div>\r\n      <div className=\"content-hint emphasize\">* 必填</div>\r\n\r\n      <InputItem title={'暱稱'} {...{ updateInput }} />\r\n      <InputItem title={'電子郵件'} rule={mailRule} {...{ updateInput }} />\r\n      <InputItem title={'手機號碼'} rule={numRule}  {...{ updateInput }} />\r\n      <RadioInputItem title={'報名類型'} {...{ updateInput }} />\r\n      <InputItem title={'怎麼知道這個活動的？'} {...{ updateInput }} />\r\n      <ExtraInputItem title={'其他'} subTitle={'對活動的一些建議'} {...{ updateInput }} />\r\n\r\n      <div className=\"content-input-submit\">\r\n        <input className=\"submit-btn\" name=\"submit-form\" type=\"submit\" value=\"提交\" onClick={onSubmit}></input>\r\n      </div>\r\n      <div className=\"content-submit-comment\">請勿透過表單送出您的密碼。</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LazyForm;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport LazyForm from './Components/LazyForm';\n\n// 單純為了實現樣式切出來的容器\nfunction MainContainer() {\n  return (\n    <div>\n      <div className=\"form-container\">\n        <div className=\"form-area\">\n          <div className=\"form-top-line\"></div>\n          <div className=\"form-main\">\n            <LazyForm />\n          </div>\n        </div>\n      </div>\n      <div className=\"footer-line\"></div>\n      <footer>© 2020 © Copyright. All rights Reserved.</footer>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}